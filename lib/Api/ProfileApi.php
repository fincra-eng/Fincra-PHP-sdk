<?php
/**
 * ProfileApi
 * PHP version 5
 *
 * @category Class
 * @package  FincraDeveloperApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace FincraDeveloperApi\Api;

use \FincraDeveloperApi\Configuration;
use \FincraDeveloperApi\ApiClient;
use \FincraDeveloperApi\ApiException;
use \FincraDeveloperApi\ObjectSerializer;

/**
 * ProfileApi Class Doc Comment
 *
 * @category Class
 * @package  FincraDeveloperApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProfileApi
{

    /**
     * API Client
     * @var \FincraDeveloperApi\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \FincraDeveloperApi\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://DEFAULT');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \FincraDeveloperApi\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \FincraDeveloperApi\ApiClient $apiClient set the API client
     * @return ProfileApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * gettheBeneficiariesforabusiness
     *
     * Get the Beneficiaries for a business
     *
     * @param string $business_id This could be the ID of the business or the ID of a sub-account of the business (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function gettheBeneficiariesforabusiness($business_id)
    {
        list($response, $statusCode, $httpHeader) = $this->gettheBeneficiariesforabusinessWithHttpInfo ($business_id);
        return $response; 
    }


    /**
     * gettheBeneficiariesforabusinessWithHttpInfo
     *
     * Get the Beneficiaries for a business
     *
     * @param string $business_id This could be the ID of the business or the ID of a sub-account of the business (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function gettheBeneficiariesforabusinessWithHttpInfo($business_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling gettheBeneficiariesforabusiness');
        }
  
        // parse inputs
        $resourcePath = "/profile/beneficiaries/business/{businessID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessID" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * createaBeneficiary
     *
     * Create a Beneficiary
     *
     * @param string $business_id businessID (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function createaBeneficiary($business_id)
    {
        list($response, $statusCode, $httpHeader) = $this->createaBeneficiaryWithHttpInfo ($business_id);
        return $response; 
    }


    /**
     * createaBeneficiaryWithHttpInfo
     *
     * Create a Beneficiary
     *
     * @param string $business_id businessID (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function createaBeneficiaryWithHttpInfo($business_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling createaBeneficiary');
        }
  
        // parse inputs
        $resourcePath = "/profile/beneficiaries/business/{businessID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessID" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * getaBeneficiary
     *
     * Get a Beneficiary
     *
     * @param string $business_id This could be the ID of the business or the ID of a sub-account of the business (required)
     * @param string $beneficiary_id The reference or ID of the beneficiary (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getaBeneficiary($business_id, $beneficiary_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getaBeneficiaryWithHttpInfo ($business_id, $beneficiary_id);
        return $response; 
    }


    /**
     * getaBeneficiaryWithHttpInfo
     *
     * Get a Beneficiary
     *
     * @param string $business_id This could be the ID of the business or the ID of a sub-account of the business (required)
     * @param string $beneficiary_id The reference or ID of the beneficiary (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getaBeneficiaryWithHttpInfo($business_id, $beneficiary_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling getaBeneficiary');
        }
        // verify the required parameter 'beneficiary_id' is set
        if ($beneficiary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beneficiary_id when calling getaBeneficiary');
        }
  
        // parse inputs
        $resourcePath = "/profile/beneficiaries/business/{businessID}/{beneficiaryID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessID" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }// path params
        
        if ($beneficiary_id !== null) {
            $resourcePath = str_replace(
                "{" . "beneficiaryID" . "}",
                $this->apiClient->getSerializer()->toPathValue($beneficiary_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteaBeneficiary
     *
     * Delete a Beneficiary
     *
     * @param string $business_id This could be the ID of the business or the ID of a sub-account of the business (required)
     * @param string $beneficiary_id This is the beneficiary ID of the the benficiary (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function deleteaBeneficiary($business_id, $beneficiary_id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteaBeneficiaryWithHttpInfo ($business_id, $beneficiary_id);
        return $response; 
    }


    /**
     * deleteaBeneficiaryWithHttpInfo
     *
     * Delete a Beneficiary
     *
     * @param string $business_id This could be the ID of the business or the ID of a sub-account of the business (required)
     * @param string $beneficiary_id This is the beneficiary ID of the the benficiary (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function deleteaBeneficiaryWithHttpInfo($business_id, $beneficiary_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling deleteaBeneficiary');
        }
        // verify the required parameter 'beneficiary_id' is set
        if ($beneficiary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beneficiary_id when calling deleteaBeneficiary');
        }
  
        // parse inputs
        $resourcePath = "/profile/beneficiaries/business/{businessID}/{beneficiaryID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessID" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }// path params
        
        if ($beneficiary_id !== null) {
            $resourcePath = str_replace(
                "{" . "beneficiaryID" . "}",
                $this->apiClient->getSerializer()->toPathValue($beneficiary_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * updateaBeneficiary
     *
     * Update a Beneficiary
     *
     * @param string $business_id This could be the ID of the business or the ID of a sub-account of the business (required)
     * @param string $beneficiary_id The reference or ID of the beneficiary (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function updateaBeneficiary($business_id, $beneficiary_id)
    {
        list($response, $statusCode, $httpHeader) = $this->updateaBeneficiaryWithHttpInfo ($business_id, $beneficiary_id);
        return $response; 
    }


    /**
     * updateaBeneficiaryWithHttpInfo
     *
     * Update a Beneficiary
     *
     * @param string $business_id This could be the ID of the business or the ID of a sub-account of the business (required)
     * @param string $beneficiary_id The reference or ID of the beneficiary (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function updateaBeneficiaryWithHttpInfo($business_id, $beneficiary_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling updateaBeneficiary');
        }
        // verify the required parameter 'beneficiary_id' is set
        if ($beneficiary_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $beneficiary_id when calling updateaBeneficiary');
        }
  
        // parse inputs
        $resourcePath = "/profile/beneficiaries/business/{businessID}/{beneficiaryID}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessID" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }// path params
        
        if ($beneficiary_id !== null) {
            $resourcePath = str_replace(
                "{" . "beneficiaryID" . "}",
                $this->apiClient->getSerializer()->toPathValue($beneficiary_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PATCH',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * getbusinessInformation
     *
     * Get business Information
     *
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getbusinessInformation()
    {
        list($response, $statusCode, $httpHeader) = $this->getbusinessInformationWithHttpInfo ();
        return $response; 
    }


    /**
     * getbusinessInformationWithHttpInfo
     *
     * Get business Information
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getbusinessInformationWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/profile/business/me";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * getAllSubAccounts
     *
     * Get  All Sub-accounts
     *
     * @param string $business_id The ID of the business (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getAllSubAccounts($business_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getAllSubAccountsWithHttpInfo ($business_id);
        return $response; 
    }


    /**
     * getAllSubAccountsWithHttpInfo
     *
     * Get  All Sub-accounts
     *
     * @param string $business_id The ID of the business (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getAllSubAccountsWithHttpInfo($business_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling getAllSubAccounts');
        }
  
        // parse inputs
        $resourcePath = "/profile/business/{businessId}/sub-accounts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessId" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * createSubaccount
     *
     * Create Subaccount
     *
     * @param string $business_id The ID of the business (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function createSubaccount($business_id)
    {
        list($response, $statusCode, $httpHeader) = $this->createSubaccountWithHttpInfo ($business_id);
        return $response; 
    }


    /**
     * createSubaccountWithHttpInfo
     *
     * Create Subaccount
     *
     * @param string $business_id The ID of the business (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function createSubaccountWithHttpInfo($business_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling createSubaccount');
        }
  
        // parse inputs
        $resourcePath = "/profile/business/{businessId}/sub-accounts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessId" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * getOneSubaccount
     *
     * Get  One Subaccount
     *
     * @param string $business_id The ID of the business (required)
     * @param string $sub_account_id The ID of the subaccount (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getOneSubaccount($business_id, $sub_account_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getOneSubaccountWithHttpInfo ($business_id, $sub_account_id);
        return $response; 
    }


    /**
     * getOneSubaccountWithHttpInfo
     *
     * Get  One Subaccount
     *
     * @param string $business_id The ID of the business (required)
     * @param string $sub_account_id The ID of the subaccount (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getOneSubaccountWithHttpInfo($business_id, $sub_account_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling getOneSubaccount');
        }
        // verify the required parameter 'sub_account_id' is set
        if ($sub_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sub_account_id when calling getOneSubaccount');
        }
  
        // parse inputs
        $resourcePath = "/profile/business/{businessId}/sub-accounts/{subAccountId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessId" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }// path params
        
        if ($sub_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "subAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($sub_account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * updateASubaccount
     *
     * Update A Subaccount
     *
     * @param string $business_id The ID of the business (required)
     * @param string $sub_account_id The ID of the subaccount (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function updateASubaccount($business_id, $sub_account_id)
    {
        list($response, $statusCode, $httpHeader) = $this->updateASubaccountWithHttpInfo ($business_id, $sub_account_id);
        return $response; 
    }


    /**
     * updateASubaccountWithHttpInfo
     *
     * Update A Subaccount
     *
     * @param string $business_id The ID of the business (required)
     * @param string $sub_account_id The ID of the subaccount (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function updateASubaccountWithHttpInfo($business_id, $sub_account_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling updateASubaccount');
        }
        // verify the required parameter 'sub_account_id' is set
        if ($sub_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sub_account_id when calling updateASubaccount');
        }
  
        // parse inputs
        $resourcePath = "/profile/business/{businessId}/sub-accounts/{subAccountId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessId" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }// path params
        
        if ($sub_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "subAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($sub_account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PATCH',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * fetchMerchantVirtualAccounts
     *
     * Fetch Merchant Virtual Accounts
     *
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function fetchMerchantVirtualAccounts()
    {
        list($response, $statusCode, $httpHeader) = $this->fetchMerchantVirtualAccountsWithHttpInfo ();
        return $response; 
    }


    /**
     * fetchMerchantVirtualAccountsWithHttpInfo
     *
     * Fetch Merchant Virtual Accounts
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function fetchMerchantVirtualAccountsWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/profile/virtual-accounts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * getSubaccountVirtualAccounts
     *
     * Get   Subaccount  Virtual Accounts
     *
     * @param string $business_id The ID of the business (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getSubaccountVirtualAccounts($business_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getSubaccountVirtualAccountsWithHttpInfo ($business_id);
        return $response; 
    }


    /**
     * getSubaccountVirtualAccountsWithHttpInfo
     *
     * Get   Subaccount  Virtual Accounts
     *
     * @param string $business_id The ID of the business (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getSubaccountVirtualAccountsWithHttpInfo($business_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling getSubaccountVirtualAccounts');
        }
  
        // parse inputs
        $resourcePath = "/profile/virtual-accounts/business/{businessId}/sub-accounts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessId" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * requestAnEURvirtualAccountForASubaccount
     *
     * Request An EUR virtual Account  For A Subaccount
     *
     * @param string $business_id The ID of the business (required)
     * @param string $sub_account_id The ID of the subaccount (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function requestAnEURvirtualAccountForASubaccount($business_id, $sub_account_id)
    {
        list($response, $statusCode, $httpHeader) = $this->requestAnEURvirtualAccountForASubaccountWithHttpInfo ($business_id, $sub_account_id);
        return $response; 
    }


    /**
     * requestAnEURvirtualAccountForASubaccountWithHttpInfo
     *
     * Request An EUR virtual Account  For A Subaccount
     *
     * @param string $business_id The ID of the business (required)
     * @param string $sub_account_id The ID of the subaccount (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function requestAnEURvirtualAccountForASubaccountWithHttpInfo($business_id, $sub_account_id)
    {
        
        // verify the required parameter 'business_id' is set
        if ($business_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $business_id when calling requestAnEURvirtualAccountForASubaccount');
        }
        // verify the required parameter 'sub_account_id' is set
        if ($sub_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sub_account_id when calling requestAnEURvirtualAccountForASubaccount');
        }
  
        // parse inputs
        $resourcePath = "/profile/virtual-accounts/business/{businessId}/sub-accounts/{subAccountId}/requests";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($business_id !== null) {
            $resourcePath = str_replace(
                "{" . "businessId" . "}",
                $this->apiClient->getSerializer()->toPathValue($business_id),
                $resourcePath
            );
        }// path params
        
        if ($sub_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "subAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($sub_account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * getVirtualAccountRequests
     *
     * Get Virtual Account Requests
     *
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getVirtualAccountRequests()
    {
        list($response, $statusCode, $httpHeader) = $this->getVirtualAccountRequestsWithHttpInfo ();
        return $response; 
    }


    /**
     * getVirtualAccountRequestsWithHttpInfo
     *
     * Get Virtual Account Requests
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getVirtualAccountRequestsWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/profile/virtual-accounts/requests";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * requestAVirtualAccount
     *
     * Request A Virtual Account
     *
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function requestAVirtualAccount()
    {
        list($response, $statusCode, $httpHeader) = $this->requestAVirtualAccountWithHttpInfo ();
        return $response; 
    }


    /**
     * requestAVirtualAccountWithHttpInfo
     *
     * Request A Virtual Account
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function requestAVirtualAccountWithHttpInfo()
    {
        
  
        // parse inputs
        $resourcePath = "/profile/virtual-accounts/requests";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
    /**
     * getOneVirtualAccount
     *
     * Get One Virtual Account
     *
     * @param string $virtual_account_id The Id of the virtual account you want to retrieve (required)
     * @return void
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getOneVirtualAccount($virtual_account_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getOneVirtualAccountWithHttpInfo ($virtual_account_id);
        return $response; 
    }


    /**
     * getOneVirtualAccountWithHttpInfo
     *
     * Get One Virtual Account
     *
     * @param string $virtual_account_id The Id of the virtual account you want to retrieve (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \FincraDeveloperApi\ApiException on non-2xx response
     */
    public function getOneVirtualAccountWithHttpInfo($virtual_account_id)
    {
        
        // verify the required parameter 'virtual_account_id' is set
        if ($virtual_account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_account_id when calling getOneVirtualAccount');
        }
  
        // parse inputs
        $resourcePath = "/profile/virtual-accounts/{virtualAccountId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($virtual_account_id !== null) {
            $resourcePath = str_replace(
                "{" . "virtualAccountId" . "}",
                $this->apiClient->getSerializer()->toPathValue($virtual_account_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            }
  
            throw $e;
        }
    }
    
}
